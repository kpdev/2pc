Обобщенные переменные и их использование
=====================================================

Описание переменных
--------------------------

Переменные, формируемые на основе обобщенных структур обычно являются специализациями (специализированными переменными). То есть, их тип строго определен, что позволяет знать размер такой переменной, а также выполнение над ней операции sizeof во время компиляции. Тип специализации такой переменной задается как ее признак, идущий в угловых скобках.

::

  специализированная_переменная = тип_обобщенной_структуры "<"  признак | имя_типа ">" имя_переменной
    [ "=" начальное_значение ]
  начальное_значение = [ "{" [ значения_полей_структуры ] "}" ] "<" [ значения_полей специализации ] ">"
    | "{" [ значения_полей_структуры ] "}" [ "<" [ значения_полей специализации ] ">" ]

Значения полей задаются в традиционном для языка C стиле.

Примеры описаний специализированных переменных
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

На основе ранее описанных обобщающих структур можно создавать различные специализации. Ниже представлены специализации прямоугольника и ромба для различных обобщенных фигур.

.. code-block:: c


  struct Figure01<Rectangle> rect;
  struct Figure02<rhomb> rhombus;

Помимо этого такие переменные можно инициализировать, так как поля их также становятся известными. Инициализация альтернативной части задается в угловых скобках:

.. code-block:: c

  struct Figure01<Triangle> t01 = {}<3, 4, 5>;
  struct Figure01<Triangle> t02 = <5, 4, 5>;

То есть, при отсутствии инициализации полей структуры пустые фигурные скобки можно не указывать. Аналогичным образом можно также опускать и инициализацию полей специализации, не указывая угловые скобки:

.. code-block:: c

  struct gender<male> man = { 25, 176 };

Однако в более общем случае можно указывать все поля:

.. code-block:: c

  ColoredFigure<Rectangle> r01 = {green}<10, 20>;
  ColoredFigure<Rectangle> r02 = {red}<15, 10>;

Описание указателей
----------------------

Указатели на обобщение могут быть как специализированными, так и общими. В первом случае, как и для специализированной переменной, указывается признак специализации:

.. code-block:: c


  struct Figure01<Triangle> *pt = &t;

Такие указатели могут ссылаться только на специализированные переменные и им могут присваиваться значения только других специализированных указателей с той же специализацией. В отличие от них обобщенные указатели не содержат признак специализации и могут ссылаться на различные специализации данного обобщения. Им также могут быть присвоены значения как специализированных так и обобщенных указателей имеющих аналогичный обобщенный тип.

.. code-block:: c


  struct Figure01 *p = &rect;
  p = pt;

Фактически в данном случае происходит разыменование типа специализации, восстановление которого возможно либо путем динамической проверки признака специализации во время выполнения специальной функцией, либо во время выполненения обобщающих функций, реализующих процедурно-параметрический полиморфизм.

.. note::

  Это будет описано далее. Хорошо бы при этом подобрать для данной функции ключевое слово, наиболее подходящее по смыслу. Может быть ``case``?

Использование переменных
------------------------------

Доступ к полям специализированных переменных
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Доступ к структурным полям осуществляется точно также как доступ к полям обычных структур данных. Доступ к полям специализации организуется путем указания имени поля в угловых скобках:

.. code-block:: c

  struct T {} < a: int, b: double >;
  struct T<int> t;
  int i = t<a>;

