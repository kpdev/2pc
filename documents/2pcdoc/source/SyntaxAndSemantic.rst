Синтаксис и семантика процедурно-параметрических расширений
====================================================================

Обобщенная структура
--------------------------

Основной абстракцией, определяющей процедурно-параметрическое обобщение, является обобщенная структура. Она является расширением структуры языка программирования C, а ее синтаксис сформирован таким образом, чтобы не вносить изменения в обычную структур, а осуществить только ее расширение. При этом обычные структуры сохраняются, используясь как ранее. По сути в синтаксис структуры вносится дополнение, которое и определяет формирование обобщение.
::

  обощенная_структура = структура [ обобщающая_часть ]
  обобщающая_часть = ["const"] "<" [ варианты ] ">"
  варианты = помеченные_варианты | непомеченные_варианты | "typedef"
  непомеченные_варианты = ид_типа { "," ид_типа}
  помеченные_варианты = вариант { "," вариант }
  вариант = [признак ":" { признак ":" } ид_типа ]

Вариант ``typedef`` используется в том случае, когда в обобщающей части отстутствуют альтернативы, а расширения в других единицах компиляции должны получить информацию о том, что для альтернатив должны использоваться непомеченные варианты. Если список вариантов пустой, то для последующего расширения используются альтернативы с признаками (помеченные варианты).

Примеры описания обобщенных структур
----------------------------------------

Неизменяемое процедурно-параметрическое обобщение, не содержащее общих полей, с явным указанием признака:

::

  // Имитация перечислимого типа
  struct week_days {} const
    <Sunday:Monday:Tuesday:Wednesday:Thursday:Friday:Saturday: void>;

Изменяемые процедурно-параметрические обобщения, включающие в качестве альтернатив прямоугольник и треугольник:

::

  // Прямоугольник
  typedef struct Rectangle { int x, y; } Rectangle;
  // Треугольник
  typedef struct Triangle { int a, b, c; } Triangle;

  // Фигура, обобщающая альтернативные по типу фигуры
  // (без использования описания typedef)
  struct Figure01 {} < struct Rectangle, struct Triangle >;

  // Фигура, обобщающая другие фигуры по признаку,
  // где ромб задается диагоналями (с использованием описания typedef)
  struct Figure02 {} <rect: rhomb: Rectangle, trian: Triangle>;

Как и для любой структуры можно использовать ``typedef``

::

  typedef Figure03 {} <> Figure;

Расширение обобщенной структуры
------------------------------------

Расширение обобщенной структуры может осуществляться как в текущей, так и в других единицах компиляции. В первом случае компилятор сам может сделать необходимые объединения и сформировать общий код для обобщенной структуры (по аналогии с синтаксически управляемым препроцессингом). Во втором случае объединение возможно на уровне специального компоновщика (что, наверное, не очень удобно из-за появления дополнительных костылей). И в том и другом случае возможно формирование обобщения во время запуска программы как дополнительного процесса, предшествующего запуску функции main. Это требует специального исследования.

С точки зрения синтаксиса расширение обобщенной структуры выглядит как добавление альтернатив к уже существующей структуре, описание которой должно быть известно и представлено, например в заголовочном файле. Возможная проблема может быть связана с тем, что в разных расширениях могут быть одинаковые признаки, что ведет к семантической некорректности, разрешение которой требует отдельных исследований.

В целом синтаксис расширения может выглядеть следующим образом:

::

  расширение_обобщения = обобщающий_тип "+=" обобщающая_часть

Задание альтернатив в обобщающей части должно совпадать с их определением в обобщенной структуре. То есть, при использовании признаков, признаки должны присутствовать и в обобщающей части расширения.

Примеры расширения обобщений
-------------------------------

Добавление круга в обобщенные фигуры может происходить следующим образом:
::

  // Круг
  typedef struct Circle { int r; } Circle;

  // Добавлени круга с использованием разных приемов
  struct Figure01 += <Circle>;
  struct Figure02 += <circ: struct Circle>;
  Figure  += <c: Circle, r: Rectangle, t: Triangle>;



