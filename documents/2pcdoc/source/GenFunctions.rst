Обработчики параметрических обобщений
=============================================

Обобщающие функции
-------------------------

Обработка специализаций поддерживается обобщающими функциями (ОФ).
В ОФ реализуется механизм диспетчеризации, который, основываясь на переданных в нее
обобщениях, выбирает соответствующий обработчик

::

  обобщающая_функция = сигнатура_оф параметры инициализатор_оф
  сигнатура_оф = возвращаемый_тип "switch" идентификатор_оф
  параметры = "(" параметр { "," параметр } ")"
  параметр = тип [ идентификатор ]
  инициализатор_оф = "{" имя_обработчика { "," имя_обработчика } "}"

  Как минимум один из параметров должен иметь тип обобщенной структуры



Пример обобщающей функции
--------------------------

Для описания примера применения ОФ
 воспользуемся следующими специализациями и обобщением:

.. code-block:: c

  // Прямоугольник
  typedef struct Rectangle { int x, y; } Rectangle;
  // Треугольник
  typedef struct Triangle { int a, b, c; } Triangle;

  // Фигура, обобщающая альтернативные по типу фигуры
  struct FigureSimple {} < Rectangle, Triangle >;

Для данных специализаций добавляем обработчики
и обобщающую функцию:

.. code-block:: c

  void OutputR(struct Rectangle* r) { /**/ }
  void OutputT(struct Triangle*  t) { /**/ }

  void switch Output(struct FigureSimple*) = { OutputR, OutputT }


Пример обобщающей функции для обобщения с помеченными вариантами
-----------------------------------------------------------------

Если же обобщение задается с помощью признаков, тогда инициализация
обобщающей функции будет следующая:

.. code-block:: c

  // Фигура, обобщающая другие фигуры по признаку,
  // где ромб задается диагоналями
  struct FigureTagged {} <rect: rhomb: Rectangle, trian: Triangle>;
  void OutputRhomb(struct Rectangle* r) { /**/ }
  void OutputRect(struct Rectangle* r) { /**/ }
  void OutputT(struct Triangle*  t) { /**/ }

  void switch OutputTagged(struct FigureTagged*) = { OutputRect: rect, OutputRhomb: rhomb, OutputT }

Обработчики параметрических специализаций
----------------------------------------------
